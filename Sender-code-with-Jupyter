#Needed imports
import meshtastic
import meshtastic.serial_interface
import time
import threading
import ipywidgets as widgets
from IPython.display import display
import serial

#####

#Install the right driver for your device: https://www.silabs.com/software-and-tools/usb-to-uart-bridge-vcp-drivers?tab=downloads

#####

#Check which ports are opened
import serial.tools.list_ports
ports = list(serial.tools.list_ports.comports())
for port in ports:
    print(port.device)

#####

#Choose the right COM for every next step

#####

#Only the first time, if SerialEnabled is not equal to TRUE
!meshtastic --port COM6 --set device.serialEnabled true --reboot

#####

#Only if you want to check your device
from meshtastic.serial_interface import SerialInterface
iface_D = SerialInterface(devPath="COM6")
iface_D.close()
print("Gaulix-droit :", iface_D.myInfo)

#####

#Only if you want to get information from your device
!python -m meshtastic --port COM6 --info
iface_D.close()

#####

#Main code
from meshtastic.serial_interface import SerialInterface
import time
import hashlib
import math

######################################################################################################
######################################################################################################
######################################################################################################
######################################################################################################
######################################################################################################

###CONNECTING TO THE DEVICE
iface_D = SerialInterface(devPath="COM6", noProto=False)
time.sleep(2)


#IF VALUE = 0, THEN IT BROADCASTS THE TEXT MESSAGE
#IF VALUE = 1, THEN IT BROADCAST THE SIGNED BITCOIN TRANSACTION

value = 0

######################################################################################################
######################################################################################################
######################################################################################################
######################################################################################################
######################################################################################################

if value == 0:
    ###MESSAGE TEXT TO SEND
    text_message ="Hi guys ! I'm in Brussels and I'm reaching out to you, Bitcoin Lille !"
    
    ###CREDITS TEXT TO SEND IF NOT RECEIVED AFTER THE SIGNED BITCOIN TRANSACTION
    #text_message = "Credits: Bitcoin lille, Nicolas Jaume, ProfEduStream, Synthex, Bitcoinizam & Plan B Network ðŸŸ "
    total_text_length = len(text_message)
    
    ###PARAMETERS
    MAX_PAYLOAD_SIZE = 94
    TAG_OVERHEAD = 24
    CHUNK_SIZE = MAX_PAYLOAD_SIZE - TAG_OVERHEAD
    
    msg_text_to_send = f"TEXT {total_text_length} {text_message}"
    
    iface_D.sendText(msg_text_to_send)
    print(f"ðŸ“¨ Sent: {msg_text_to_send} \n")

    iface_D.close()
    print("âœ… The message had been sent")

else:
    ###MESSAGE TEXT TO SEND
    text_message ="I'm sending a signed Bitcoin transaction over the Meshtastic network. Thanks Gaulix !"
    total_text_length = len(text_message)
    
    ###PARAMETERS
    MAX_PAYLOAD_SIZE = 94
    TAG_OVERHEAD = 24
    CHUNK_SIZE = MAX_PAYLOAD_SIZE - TAG_OVERHEAD
    
    msg_text_to_send = f"TEXT {total_text_length} {text_message}"
    
    iface_D.sendText(msg_text_to_send)
    print(f"ðŸ“¨ Sent: {msg_text_to_send} \n")


    time.sleep(5)
    
    
    ###SIGNED BITCOIN TRANSACTION TO SEND
    btc_message ="02000000000101f0dca7caccc126a51a1a9bca12bd8686b8d9f56bcb1b84245b8f94d8c19a45d40300000000fdffffff0116ab0000000000001600149d140517b4b6d50f4c4d5950408f308eb72c584902473044022070ac5ef095a522f0d5fe35966d583d5fcbd2dda0e14b5e513008e8ed774e5f16022011a51b72f64ee2d637c45391ed8772918e551b0720feac94d143fc4201ad4b0b012103f7fe8dad5f510e19e393286cbbfbfb64f5973625d028b185145cdacbed7092bf37454700"
    total_btc_length = len(btc_message)
    
    long_btc_message_bytes = bytes.fromhex(btc_message)
    checksum_btc = hashlib.sha256(long_btc_message_bytes).hexdigest()[:7]
    
    ###PARAMETERS
    MAX_PAYLOAD_SIZE = 94
    TAG_OVERHEAD = 24
    CHUNK_SIZE = MAX_PAYLOAD_SIZE - TAG_OVERHEAD
    
    chunks_btc = [btc_message[i:i+CHUNK_SIZE] for i in range(0, total_btc_length, CHUNK_SIZE)]
    total_btc_parts = len(chunks_btc)
    
    
    ###EVERY PART OF THE SIGNED BITCOIN TRANSACTION IS SENT
    for i, chunk in enumerate(chunks_btc):
        msg_btc_to_send = f"BTC {total_btc_length} {checksum_btc} {i+1}/{total_btc_parts} {chunk}"
    
        iface_D.sendText(msg_btc_to_send)
        print(f"ðŸ“¨ Sent: {msg_btc_to_send} \n")

        
        time.sleep(5)  # dÃ©lai lÃ©ger pour Ã©viter collisions


    
    ###MESSAGE TEXT TO SEND
    text_message ="Credits: Bitcoin lille, Nicolas Jaume, ProfEduStream, Synthex, Bitcoinizam & Plan B Network"
    total_text_length = len(text_message)
    
    ###PARAMETERS
    MAX_PAYLOAD_SIZE = 94
    TAG_OVERHEAD = 24
    CHUNK_SIZE = MAX_PAYLOAD_SIZE - TAG_OVERHEAD
    
    msg_text_to_send = f"TEXT {total_text_length} {text_message}"
    
    iface_D.sendText(msg_text_to_send)
    print(f"ðŸ“¨ Sent: {msg_text_to_send} \n")


    time.sleep(5)
    
    iface_D.close()
    print("âœ… Every parts had been sent")
